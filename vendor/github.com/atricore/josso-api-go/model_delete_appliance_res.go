/*
 * Atricore Console :: Remote : API
 *
 * # Atricore Console API
 *
 * API version: 1.4.3-SNAPSHOT
 * Contact: sgonzalez@atricore.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// DeleteApplianceRes struct for DeleteApplianceRes
type DeleteApplianceRes struct {
	Error *string `json:"error,omitempty"`
	Removed *bool `json:"removed,omitempty"`
	ValidationErrors *[]string `json:"validationErrors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeleteApplianceRes DeleteApplianceRes

// NewDeleteApplianceRes instantiates a new DeleteApplianceRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteApplianceRes() *DeleteApplianceRes {
	this := DeleteApplianceRes{}
	return &this
}

// NewDeleteApplianceResWithDefaults instantiates a new DeleteApplianceRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteApplianceResWithDefaults() *DeleteApplianceRes {
	this := DeleteApplianceRes{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DeleteApplianceRes) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteApplianceRes) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DeleteApplianceRes) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *DeleteApplianceRes) SetError(v string) {
	o.Error = &v
}

// GetRemoved returns the Removed field value if set, zero value otherwise.
func (o *DeleteApplianceRes) GetRemoved() bool {
	if o == nil || o.Removed == nil {
		var ret bool
		return ret
	}
	return *o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteApplianceRes) GetRemovedOk() (*bool, bool) {
	if o == nil || o.Removed == nil {
		return nil, false
	}
	return o.Removed, true
}

// HasRemoved returns a boolean if a field has been set.
func (o *DeleteApplianceRes) HasRemoved() bool {
	if o != nil && o.Removed != nil {
		return true
	}

	return false
}

// SetRemoved gets a reference to the given bool and assigns it to the Removed field.
func (o *DeleteApplianceRes) SetRemoved(v bool) {
	o.Removed = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *DeleteApplianceRes) GetValidationErrors() []string {
	if o == nil || o.ValidationErrors == nil {
		var ret []string
		return ret
	}
	return *o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteApplianceRes) GetValidationErrorsOk() (*[]string, bool) {
	if o == nil || o.ValidationErrors == nil {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *DeleteApplianceRes) HasValidationErrors() bool {
	if o != nil && o.ValidationErrors != nil {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []string and assigns it to the ValidationErrors field.
func (o *DeleteApplianceRes) SetValidationErrors(v []string) {
	o.ValidationErrors = &v
}

func (o DeleteApplianceRes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Removed != nil {
		toSerialize["removed"] = o.Removed
	}
	if o.ValidationErrors != nil {
		toSerialize["validationErrors"] = o.ValidationErrors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeleteApplianceRes) UnmarshalJSON(bytes []byte) (err error) {
	varDeleteApplianceRes := _DeleteApplianceRes{}

	if err = json.Unmarshal(bytes, &varDeleteApplianceRes); err == nil {
		*o = DeleteApplianceRes(varDeleteApplianceRes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "removed")
		delete(additionalProperties, "validationErrors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteApplianceRes struct {
	value *DeleteApplianceRes
	isSet bool
}

func (v NullableDeleteApplianceRes) Get() *DeleteApplianceRes {
	return v.value
}

func (v *NullableDeleteApplianceRes) Set(val *DeleteApplianceRes) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteApplianceRes) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteApplianceRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteApplianceRes(val *DeleteApplianceRes) *NullableDeleteApplianceRes {
	return &NullableDeleteApplianceRes{value: val, isSet: true}
}

func (v NullableDeleteApplianceRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteApplianceRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


